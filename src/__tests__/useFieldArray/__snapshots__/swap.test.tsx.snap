// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`useFieldArray array of array fields should populate all array fields correctly with setValue 1`] = `
<DocumentFragment>
  <div>
    <div>
      <input
        name="nest.0.value"
        value="1"
      />
      <div>
        <input
          name="nest.0.nestedArray.0.value"
          value="1"
        />
      </div>
    </div>
    <div>
      <input
        name="nest.1.value"
        value="2"
      />
      <div>
        <input
          name="nest.1.nestedArray.0.value"
          value="1"
        />
      </div>
    </div>
  </div>
</DocumentFragment>
`;

exports[`useFieldArray array of array fields should populate all array fields with setValue when name match Field Array 1`] = `
<DocumentFragment>
  <div>
    <div>
      <input
        name="nest.0.value"
        value="1"
      />
      <div>
        <input
          name="nest.0.nestedArray.0.value"
          value="1"
        />
      </div>
    </div>
    <div>
      <input
        name="nest.1.value"
        value="2"
      />
      <div>
        <input
          name="nest.1.nestedArray.0.value"
          value="1"
        />
      </div>
    </div>
  </div>
</DocumentFragment>
`;

exports[`useFieldArray array of array fields should worked with deep nested field array without chaining useFieldArray 1`] = `
<DocumentFragment>
  <div>
    <div>
      <input
        name="nest.0.value"
        value="1"
      />
      <div>
        <input
          name="nest.0.nestedArray.deepNest.0.value"
          value="1"
        />
        <button
          type="button"
        >
          append
        </button>
      </div>
      <button
        type="button"
      >
        setValue
      </button>
    </div>
  </div>
</DocumentFragment>
`;

exports[`useFieldArray array of array fields should worked with deep nested field array without chaining useFieldArray 2`] = `
<DocumentFragment>
  <div>
    <div>
      <input
        name="nest.0.value"
        value="1"
      />
      <div>
        <input
          name="nest.0.nestedArray.deepNest.0.value"
          value="1"
        />
        <input
          name="nest.0.nestedArray.deepNest.1.value"
          value="2"
        />
        <input
          name="nest.0.nestedArray.deepNest.2.value"
          value="3"
        />
        <button
          type="button"
        >
          append
        </button>
      </div>
      <button
        type="button"
      >
        setValue
      </button>
    </div>
  </div>
</DocumentFragment>
`;

exports[`useFieldArray array of array fields should worked with deep nested field array without chaining useFieldArray 3`] = `
<DocumentFragment>
  <div>
    <div>
      <input
        name="nest.0.value"
        value="1"
      />
      <div>
        <input
          name="nest.0.nestedArray.deepNest.0.value"
          value="1"
        />
        <input
          name="nest.0.nestedArray.deepNest.1.value"
          value="2"
        />
        <input
          name="nest.0.nestedArray.deepNest.2.value"
          value="3"
        />
        <input
          name="nest.0.nestedArray.deepNest.3.value"
          value="test"
        />
        <button
          type="button"
        >
          append
        </button>
      </div>
      <button
        type="button"
      >
        setValue
      </button>
    </div>
  </div>
</DocumentFragment>
`;

exports[`useFieldArray should append multiple inputs correctly 1`] = `
Array [
  Object {
    "test": Array [
      Object {
        "value": "data",
      },
    ],
  },
  Object {
    "test": Array [
      Object {
        "value": "data",
      },
    ],
  },
  Object {
    "test": Array [
      Object {
        "value": "data",
      },
      Object {
        "value": "test",
      },
      Object {
        "value": "test1",
      },
    ],
  },
  Object {
    "test": Array [
      Object {
        "value": "data",
      },
      Object {
        "value": "test",
      },
      Object {
        "value": "test1",
      },
    ],
  },
]
`;

exports[`useFieldArray should custom register append, prepend and insert inputs with values 1`] = `
Array [
  Array [],
  Array [
    Object {
      "test": "append",
      "test1": "append",
    },
  ],
  Array [
    Object {
      "test": "append",
      "test1": "append",
    },
  ],
  Array [
    Object {
      "test": "prepend",
      "test1": "prepend",
    },
    Object {
      "test": "append",
      "test1": "append",
    },
  ],
  Array [
    Object {
      "test": "prepend",
      "test1": "prepend",
    },
    Object {
      "test": "append",
      "test1": "append",
    },
  ],
  Array [
    Object {
      "test": "prepend",
      "test1": "prepend",
    },
    Object {
      "test": "insert",
      "test1": "insert",
    },
    Object {
      "test": "append",
      "test1": "append",
    },
  ],
  Array [
    Object {
      "test": "prepend",
      "test1": "prepend",
    },
    Object {
      "test": "insert",
      "test1": "insert",
    },
    Object {
      "test": "append",
      "test1": "append",
    },
  ],
  Array [
    Object {
      "test": "prepend",
      "test2": Array [
        Object {
          "test": "test",
        },
      ],
    },
    Object {
      "test": "prepend",
      "test1": "prepend",
    },
    Object {
      "test": "insert",
      "test1": "insert",
    },
    Object {
      "test": "append",
      "test1": "append",
    },
  ],
  Array [
    Object {
      "test": "prepend",
      "test2": Array [
        Object {
          "test": "test",
        },
      ],
    },
    Object {
      "test": "prepend",
      "test1": "prepend",
    },
    Object {
      "test": "insert",
      "test1": "insert",
    },
    Object {
      "test": "append",
      "test1": "append",
    },
  ],
  Array [
    Object {
      "test": "prepend",
      "test2": Array [
        Object {
          "test": "test",
        },
      ],
    },
    Object {
      "test": "prepend",
      "test1": "prepend",
    },
    Object {
      "test": "insert",
      "test1": "insert",
    },
    Object {
      "test": "append",
      "test1": "append",
    },
    Object {
      "test": "prepend",
      "test2": Array [
        Object {
          "test": "test",
        },
      ],
    },
  ],
  Array [
    Object {
      "test": "prepend",
      "test2": Array [
        Object {
          "test": "test",
        },
      ],
    },
    Object {
      "test": "prepend",
      "test1": "prepend",
    },
    Object {
      "test": "insert",
      "test1": "insert",
    },
    Object {
      "test": "append",
      "test1": "append",
    },
    Object {
      "test": "prepend",
      "test2": Array [
        Object {
          "test": "test",
        },
      ],
    },
  ],
  Array [
    Object {
      "test": "prepend",
      "test2": Array [
        Object {
          "test": "test",
        },
      ],
    },
    Object {
      "test": "insert",
      "test2": Array [
        Object {
          "test": "test",
        },
      ],
    },
    Object {
      "test": "prepend",
      "test1": "prepend",
    },
    Object {
      "test": "insert",
      "test1": "insert",
    },
    Object {
      "test": "append",
      "test1": "append",
    },
    Object {
      "test": "prepend",
      "test2": Array [
        Object {
          "test": "test",
        },
      ],
    },
  ],
  Array [
    Object {
      "test": "prepend",
      "test2": Array [
        Object {
          "test": "test",
        },
      ],
    },
    Object {
      "test": "insert",
      "test2": Array [
        Object {
          "test": "test",
        },
      ],
    },
    Object {
      "test": "prepend",
      "test1": "prepend",
    },
    Object {
      "test": "insert",
      "test1": "insert",
    },
    Object {
      "test": "append",
      "test1": "append",
    },
    Object {
      "test": "prepend",
      "test2": Array [
        Object {
          "test": "test",
        },
      ],
    },
  ],
]
`;

exports[`useFieldArray should update field array defaultValues when invoke setValue 1`] = `
Array [
  Object {
    "names": Array [
      Object {
        "name": "will",
      },
      Object {
        "name": "Mike",
      },
    ],
  },
  Object {
    "names": Array [
      Object {
        "name": "will",
      },
      Object {
        "name": "Mike",
      },
    ],
  },
  Object {
    "names": Array [],
  },
  Object {
    "names": Array [],
  },
  Object {
    "names": Array [],
  },
]
`;
